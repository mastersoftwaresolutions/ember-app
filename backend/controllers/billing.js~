var Billing = require('../models/billing');

exports.index = function(req,res) {
	Billing.find(function(err,bills) {
									
		res.send({bills: bills});
	});
};
exports.uploadimage = function(req,res) {
	var fs=		require("fs");
	fs.writeFile('uploads/abc.png', req.body.image, function (err) {
    if (err) throw err;
      console.log("It's saved");
    });								
};

exports.create = function(req,res) {
	//code to upload base64							
	var Image1 = req.body.Image1?req.body.Image1:req.body.bill.Image1;
	var Image2 = req.body.Image2?req.body.Image2:req.body.bill.Image2;
	var Image3 = req.body.Image3?req.body.Image3:req.body.bill.Image3;
	
	//code to upload first image
	var uploadPath1='';
	if(Image1){
	  	base64Data = Image1;
	   
		var matches = base64Data.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/),
	    response = {};
	
	    if (matches.length !== 3) {
	     return new Error('Invalid input string');
	    }
	
	    response.type = matches[1];
	    response.data = new Buffer(matches[2], 'base64');
	    
	    var ImageName='';
	    var hrTime = process.hrtime()
		imageName=hrTime[0] * 1000000 + hrTime[1] / 1000;	
	    if(response.type=='image/jpeg'){
			imageName=imageName+'.jpeg';					
		}
	    if(response.type=='image/jpg'){
			imageName=imageName+'.jpg';					
		}
	    if(response.type=='image/png'){
			imageName=imageName+'.png';					
		}
	    if(response.type=='image/gif'){
			imageName=imageName+'.gif';					
		}
	    uploadPath1="uploads/"+imageName;
	    binaryData = new Buffer(response.data, 'base64').toString('binary');
		require("fs").writeFile("frontend/uploads/"+imageName, binaryData, "binary", function(err) {
		  console.log(err); // writes out file without error, but it's not a valid image
		});
	}
	
	//code to upload second image
	var uploadPath2='';
	if(Image2){
	  	base64Data = Image2;
	   
		var matches = base64Data.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/),
	    response = {};
	
	    if (matches.length !== 3) {
	     return new Error('Invalid input string');
	    }
	
	    response.type = matches[1];
	    response.data = new Buffer(matches[2], 'base64');
	    
	    var ImageName='';
	    var hrTime = process.hrtime()
		imageName=hrTime[0] * 1000000 + hrTime[1] / 1000;	
	    if(response.type=='image/jpeg'){
			imageName=imageName+'.jpeg';					
		}
	    if(response.type=='image/jpg'){
			imageName=imageName+'.jpg';					
		}
	    if(response.type=='image/png'){
			imageName=imageName+'.png';					
		}
	    if(response.type=='image/gif'){
			imageName=imageName+'.gif';					
		}
	    uploadPath2="uploads/"+imageName;
	    binaryData = new Buffer(response.data, 'base64').toString('binary');
		require("fs").writeFile("frontend/uploads/"+imageName, binaryData, "binary", function(err) {
		  console.log(err); // writes out file without error, but it's not a valid image
		});
	}
	
	//code to upload third image
	var uploadPath3='';
	if(Image3){
	  	base64Data = Image3;
	   
		var matches = base64Data.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/),
	    response = {};
	
	    if (matches.length !== 3) {
	     return new Error('Invalid input string');
	    }
	
	    response.type = matches[1];
	    response.data = new Buffer(matches[2], 'base64');
	    
	    var ImageName='';
	    var hrTime = process.hrtime()
		imageName=hrTime[0] * 1000000 + hrTime[1] / 1000;	
	    if(response.type=='image/jpeg'){
			imageName=imageName+'.jpeg';					
		}
	    if(response.type=='image/jpg'){
			imageName=imageName+'.jpg';					
		}
	    if(response.type=='image/png'){
			imageName=imageName+'.png';					
		}
	    if(response.type=='image/gif'){
			imageName=imageName+'.gif';					
		}
	    uploadPath3="uploads/"+imageName;
	    binaryData = new Buffer(response.data, 'base64').toString('binary');
		require("fs").writeFile("frontend/uploads/"+imageName, binaryData, "binary", function(err) {
		  console.log(err); // writes out file without error, but it's not a valid image
		});
	}
	var InvoiceNumber=req.body.InvoiceNumber?req.body.InvoiceNumber:req.body.bill.InvoiceNumber;
	
	var VendorName=req.body.VendorName?req.body.VendorName:req.body.bill.VendorName;
	var Date=req.body.Date?req.body.Date:req.body.bill.Date;
	var Amount=req.body.Amount?req.body.Amount:req.body.bill.Amount;
	var Category=req.body.Category?req.body.Category:req.body.bill.Category;
	var Description=req.body.Description?req.body.Description:req.body.bill.Description;
	
	if(InvoiceNumber){	
												
	 var _newBilling = new Billing({ InvoiceNumber: InvoiceNumber,
								    VendorName: VendorName,
								    Date: Date,
								    Amount: Amount,
								    Category: Category,
								    Description: Description,
								    Image1: uploadPath1,
								    Image2: uploadPath2,
								    Image3: uploadPath3
								   });
	_newBilling.save(function(err,result) {
								
		if(!err && result){						
		res.send({bill: _newBilling});
		}else{
			console.log(err);
		}
	});
	}else{
		res.send({billinginfo: 'Record Not Saved!!'});
	}
	
}

